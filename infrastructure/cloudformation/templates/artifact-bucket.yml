AWSTemplateFormatVersion: '2010-09-09'
Description: 'Temporary Artifact Bucket for CI/CD Pipeline'

Parameters:
  EnvironmentName:
    Type: String
    Default: dev
    AllowedValues: [dev, staging, prod]
    Description: Environment name for the artifact bucket
  
  RetentionDays:
    Type: Number
    Default: 7
    MinValue: 1
    MaxValue: 90
    Description: Number of days to retain artifacts before deletion

Resources:
  # S3 Bucket for temporary artifacts
  ArtifactBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${AWS::StackName}-artifacts-${EnvironmentName}'
      VersioningConfiguration:
        Status: Enabled
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      LifecycleConfiguration:
        Rules:
          - Id: DeleteOldArtifacts
            Status: Enabled
            ExpirationInDays: !Ref RetentionDays
            NoncurrentVersionExpirationInDays: !Ref RetentionDays
            AbortIncompleteMultipartUpload:
              DaysAfterInitiation: 1
      NotificationConfiguration:
        LambdaConfigurations:
          - Event: s3:ObjectCreated:*
            Function: !GetAtt ArtifactNotificationFunction.Arn
            Filter:
              S3Key:
                Rules:
                  - Name: prefix
                    Value: 'builds/'
      Tags:
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: Purpose
          Value: 'CI/CD Artifacts'
        - Key: ManagedBy
          Value: 'CloudFormation'

  # IAM Role for Lambda function
  ArtifactNotificationRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: S3NotificationPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:GetObjectVersion
                Resource: !Sub '${ArtifactBucket}/*'

  # Lambda function for artifact notifications
  ArtifactNotificationFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${AWS::StackName}-artifact-notification-${EnvironmentName}'
      Runtime: python3.9
      Handler: index.handler
      Role: !GetAtt ArtifactNotificationRole.Arn
      Code:
        ZipFile: |
          import json
          import boto3
          import os
          
          def handler(event, context):
              print(f"Artifact uploaded to {os.environ['BUCKET_NAME']}")
              for record in event['Records']:
                  bucket = record['s3']['bucket']['name']
                  key = record['s3']['object']['key']
                  print(f"New artifact: s3://{bucket}/{key}")
              return {'statusCode': 200}
      Environment:
        Variables:
          BUCKET_NAME: !Ref ArtifactBucket
      Timeout: 30
      MemorySize: 128

  # Lambda permission for S3 notifications
  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref ArtifactNotificationFunction
      Action: lambda:InvokeFunction
      Principal: s3.amazonaws.com
      SourceArn: !Sub '${ArtifactBucket}'

  # IAM Role for CI/CD pipeline access
  CICDRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSCodeBuildServiceRole
      Policies:
        - PolicyName: ArtifactBucketAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:DeleteObject
                  - s3:ListBucket
                Resource:
                  - !Sub '${ArtifactBucket}'
                  - !Sub '${ArtifactBucket}/*'

  # CloudWatch Log Group for Lambda
  LambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${ArtifactNotificationFunction}'
      RetentionInDays: 7

Outputs:
  ArtifactBucketName:
    Description: Name of the artifact bucket
    Value: !Ref ArtifactBucket
    Export:
      Name: !Sub '${AWS::StackName}-ArtifactBucketName'

  ArtifactBucketArn:
    Description: ARN of the artifact bucket
    Value: !GetAtt ArtifactBucket.Arn
    Export:
      Name: !Sub '${AWS::StackName}-ArtifactBucketArn'

  CICDRoleArn:
    Description: ARN of the CI/CD role
    Value: !GetAtt CICDRole.Arn
    Export:
      Name: !Sub '${AWS::StackName}-CICDRoleArn'

  LambdaFunctionArn:
    Description: ARN of the notification Lambda function
    Value: !GetAtt ArtifactNotificationFunction.Arn
    Export:
      Name: !Sub '${AWS::StackName}-LambdaFunctionArn' 